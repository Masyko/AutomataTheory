//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AutomataAnalyzer.sm
//
#include "AutomataAnalyzer_sm.h"

using namespace statemap;

namespace Automata_Analyzer
{
    // Static class declarations.
    MainMap_Geo MainMap::Geo("MainMap::Geo", 0);
    MainMap_Colon MainMap::Colon("MainMap::Colon", 1);
    MainMap_Latitude MainMap::Latitude("MainMap::Latitude", 2);
    MainMap_DotInLatitude MainMap::DotInLatitude("MainMap::DotInLatitude", 3);
    MainMap_LatitudeContinueAfterDot MainMap::LatitudeContinueAfterDot("MainMap::LatitudeContinueAfterDot", 4);
    MainMap_CommaAfterLatitude MainMap::CommaAfterLatitude("MainMap::CommaAfterLatitude", 5);
    MainMap_Longitude MainMap::Longitude("MainMap::Longitude", 6);
    MainMap_DotInLongitude MainMap::DotInLongitude("MainMap::DotInLongitude", 7);
    MainMap_LongitudeContinueAfterDot MainMap::LongitudeContinueAfterDot("MainMap::LongitudeContinueAfterDot", 8);
    MainMap_CommaAfterLongitude MainMap::CommaAfterLongitude("MainMap::CommaAfterLongitude", 9);
    MainMap_Height MainMap::Height("MainMap::Height", 10);
    MainMap_Semicolon MainMap::Semicolon("MainMap::Semicolon", 11);
    MainMap_Equal MainMap::Equal("MainMap::Equal", 12);
    MainMap_Distance MainMap::Distance("MainMap::Distance", 13);
    MainMap_Error MainMap::Error("MainMap::Error", 14);
    MainMap_Success MainMap::Success("MainMap::Success", 15);

    void AutomataAnalyzerState::begin(AutomataAnalyzerContext& context)
    {
        Default(context);
    }

    void AutomataAnalyzerState::colon(AutomataAnalyzerContext& context)
    {
        Default(context);
    }

    void AutomataAnalyzerState::comma(AutomataAnalyzerContext& context)
    {
        Default(context);
    }

    void AutomataAnalyzerState::dot(AutomataAnalyzerContext& context, char symbol)
    {
        Default(context);
    }

    void AutomataAnalyzerState::eos(AutomataAnalyzerContext& context)
    {
        Default(context);
    }

    void AutomataAnalyzerState::equal(AutomataAnalyzerContext& context)
    {
        Default(context);
    }

    void AutomataAnalyzerState::error(AutomataAnalyzerContext& context)
    {
        Default(context);
    }

    void AutomataAnalyzerState::letter(AutomataAnalyzerContext& context, char symbol)
    {
        Default(context);
    }

    void AutomataAnalyzerState::number(AutomataAnalyzerContext& context, char symbol)
    {
        Default(context);
    }

    void AutomataAnalyzerState::semicolon(AutomataAnalyzerContext& context)
    {
        Default(context);
    }

    void AutomataAnalyzerState::Default(AutomataAnalyzerContext& context)
    {
        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

    }

    void MainMap_Default::letter(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::equal(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::colon(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::eos(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::semicolon(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::comma(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::dot(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::error(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            context.setState(MainMap::Error);
        }
        catch (...)
        {
            context.setState(MainMap::Error);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Default::begin(AutomataAnalyzerContext& context)
    {

        context.getState().Exit(context);
        context.setState(MainMap::Geo);
        context.getState().Entry(context);


    }

    void MainMap_Geo::colon(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_geo())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.ClearTempStr();
                context.setState(MainMap::Colon);
            }
            catch (...)
            {
                context.setState(MainMap::Colon);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::colon(context);
        }


    }

    void MainMap_Geo::letter(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::Geo);
        }
        catch (...)
        {
            context.setState(MainMap::Geo);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Colon::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::Latitude);
        }
        catch (...)
        {
            context.setState(MainMap::Latitude);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Latitude::comma(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_in_range_latitude())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.Save_latitude();
                ctxt.ClearTempStr();
                context.setState(MainMap::CommaAfterLatitude);
            }
            catch (...)
            {
                context.setState(MainMap::CommaAfterLatitude);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::comma(context);
        }


    }

    void MainMap_Latitude::dot(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::DotInLatitude);
        }
        catch (...)
        {
            context.setState(MainMap::DotInLatitude);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Latitude::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::Latitude);
        }
        catch (...)
        {
            context.setState(MainMap::Latitude);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_DotInLatitude::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::LatitudeContinueAfterDot);
        }
        catch (...)
        {
            context.setState(MainMap::LatitudeContinueAfterDot);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_LatitudeContinueAfterDot::comma(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_in_range_latitude())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.Save_latitude();
                ctxt.ClearTempStr();
                context.setState(MainMap::CommaAfterLatitude);
            }
            catch (...)
            {
                context.setState(MainMap::CommaAfterLatitude);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::comma(context);
        }


    }

    void MainMap_LatitudeContinueAfterDot::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::LatitudeContinueAfterDot);
        }
        catch (...)
        {
            context.setState(MainMap::LatitudeContinueAfterDot);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_CommaAfterLatitude::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::Longitude);
        }
        catch (...)
        {
            context.setState(MainMap::Longitude);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Longitude::comma(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_in_range_longitude())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.Save_longitude();
                ctxt.ClearTempStr();
                context.setState(MainMap::CommaAfterLongitude);
            }
            catch (...)
            {
                context.setState(MainMap::CommaAfterLongitude);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::comma(context);
        }


    }

    void MainMap_Longitude::dot(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::DotInLongitude);
        }
        catch (...)
        {
            context.setState(MainMap::DotInLongitude);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Longitude::eos(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_in_range_longitude())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.Save_longitude();
                ctxt.ClearTempStr();
                ctxt.Save_height_zero();
                ctxt.Acceptable();
                context.setState(MainMap::Success);
            }
            catch (...)
            {
                context.setState(MainMap::Success);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::eos(context);
        }


    }

    void MainMap_Longitude::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::Longitude);
        }
        catch (...)
        {
            context.setState(MainMap::Longitude);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Longitude::semicolon(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_in_range_longitude())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.Save_longitude();
                ctxt.ClearTempStr();
                ctxt.Save_height_zero();
                context.setState(MainMap::Semicolon);
            }
            catch (...)
            {
                context.setState(MainMap::Semicolon);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::semicolon(context);
        }


    }

    void MainMap_DotInLongitude::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::LongitudeContinueAfterDot);
        }
        catch (...)
        {
            context.setState(MainMap::LongitudeContinueAfterDot);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_LongitudeContinueAfterDot::comma(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_in_range_longitude())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.Save_longitude();
                ctxt.ClearTempStr();
                context.setState(MainMap::CommaAfterLongitude);
            }
            catch (...)
            {
                context.setState(MainMap::CommaAfterLongitude);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::comma(context);
        }


    }

    void MainMap_LongitudeContinueAfterDot::eos(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_in_range_longitude())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.Save_longitude();
                ctxt.ClearTempStr();
                ctxt.Save_height_zero();
                ctxt.Acceptable();
                context.setState(MainMap::Success);
            }
            catch (...)
            {
                context.setState(MainMap::Success);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::eos(context);
        }


    }

    void MainMap_LongitudeContinueAfterDot::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::LongitudeContinueAfterDot);
        }
        catch (...)
        {
            context.setState(MainMap::LongitudeContinueAfterDot);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_LongitudeContinueAfterDot::semicolon(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_in_range_longitude())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.Save_longitude();
                ctxt.ClearTempStr();
                ctxt.Save_height_zero();
                context.setState(MainMap::Semicolon);
            }
            catch (...)
            {
                context.setState(MainMap::Semicolon);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::semicolon(context);
        }


    }

    void MainMap_CommaAfterLongitude::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::Height);
        }
        catch (...)
        {
            context.setState(MainMap::Height);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Height::eos(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Save_height();
            ctxt.ClearTempStr();
            context.setState(MainMap::Success);
        }
        catch (...)
        {
            context.setState(MainMap::Success);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Height::number(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::Height);
        }
        catch (...)
        {
            context.setState(MainMap::Height);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Height::semicolon(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Save_height();
            ctxt.ClearTempStr();
            context.setState(MainMap::Semicolon);
        }
        catch (...)
        {
            context.setState(MainMap::Semicolon);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Semicolon::equal(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        if (ctxt.is_u())
        {
            context.getState().Exit(context);
            context.clearState();
            try
            {
                ctxt.ClearTempStr();
                context.setState(MainMap::Equal);
            }
            catch (...)
            {
                context.setState(MainMap::Equal);
                throw;
            }
            context.getState().Entry(context);
        }
        else
        {
             MainMap_Default::equal(context);
        }


    }

    void MainMap_Semicolon::letter(AutomataAnalyzerContext& context, char symbol)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Pick_up_symbol(symbol);
            context.setState(MainMap::Semicolon);
        }
        catch (...)
        {
            context.setState(MainMap::Semicolon);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Equal::number(AutomataAnalyzerContext& context, char symbol)
    {

        context.getState().Exit(context);
        context.setState(MainMap::Distance);
        context.getState().Entry(context);


    }

    void MainMap_Distance::eos(AutomataAnalyzerContext& context)
    {
        AutomataAnalyzer& ctxt = context.getOwner();

        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Acceptable();
            context.setState(MainMap::Success);
        }
        catch (...)
        {
            context.setState(MainMap::Success);
            throw;
        }
        context.getState().Entry(context);


    }

    void MainMap_Distance::number(AutomataAnalyzerContext& context, char symbol)
    {

        context.getState().Exit(context);
        context.setState(MainMap::Distance);
        context.getState().Entry(context);


    }

    void MainMap_Error::Entry(AutomataAnalyzerContext& context)

{
        AutomataAnalyzer& ctxt = context.getOwner();

        ctxt.ClearStorageList();
        ctxt.ResetFSM();
        ctxt.ClearTempStr();
    }

    void MainMap_Error::eos(AutomataAnalyzerContext& context)
    {

        context.getState().Exit(context);
        context.setState(MainMap::Geo);
        context.getState().Entry(context);


    }

    void MainMap_Success::Entry(AutomataAnalyzerContext& context)

{
        AutomataAnalyzer& ctxt = context.getOwner();

        ctxt.AddStorageList();
        ctxt.ClearStorageList();
        ctxt.ResetFSM();
        ctxt.ClearTempStr();
    }
}

//
// Local variables:
//  buffer-read-only: t
// End:
//
