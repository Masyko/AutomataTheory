//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AutomataAnalyzer.sm
//

#ifndef AUTOMATAANALYZER_SM_H
#define AUTOMATAANALYZER_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"
#include "../AutomataAnalyzer.h"

namespace Automata_Analyzer
{
    // Forward declarations.
    class MainMap;
    class MainMap_Geo;
    class MainMap_Colon;
    class MainMap_Latitude;
    class MainMap_DotInLatitude;
    class MainMap_LatitudeContinueAfterDot;
    class MainMap_CommaAfterLatitude;
    class MainMap_Longitude;
    class MainMap_DotInLongitude;
    class MainMap_LongitudeContinueAfterDot;
    class MainMap_CommaAfterLongitude;
    class MainMap_Height;
    class MainMap_Semicolon;
    class MainMap_Equal;
    class MainMap_Distance;
    class MainMap_Error;
    class MainMap_Success;
    class MainMap_Default;
    class AutomataAnalyzerState;
    class AutomataAnalyzerContext;
    class AutomataAnalyzer;

    class AutomataAnalyzerState :
        public statemap::State
    {
    public:

        AutomataAnalyzerState(const char * const name, const int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(AutomataAnalyzerContext&) {};
        virtual void Exit(AutomataAnalyzerContext&) {};

        virtual void begin(AutomataAnalyzerContext& context);
        virtual void colon(AutomataAnalyzerContext& context);
        virtual void comma(AutomataAnalyzerContext& context);
        virtual void dot(AutomataAnalyzerContext& context, char symbol);
        virtual void eos(AutomataAnalyzerContext& context);
        virtual void equal(AutomataAnalyzerContext& context);
        virtual void error(AutomataAnalyzerContext& context);
        virtual void letter(AutomataAnalyzerContext& context, char symbol);
        virtual void number(AutomataAnalyzerContext& context, char symbol);
        virtual void semicolon(AutomataAnalyzerContext& context);

    protected:

        virtual void Default(AutomataAnalyzerContext& context);
    };

    class MainMap
    {
    public:

        static MainMap_Geo Geo;
        static MainMap_Colon Colon;
        static MainMap_Latitude Latitude;
        static MainMap_DotInLatitude DotInLatitude;
        static MainMap_LatitudeContinueAfterDot LatitudeContinueAfterDot;
        static MainMap_CommaAfterLatitude CommaAfterLatitude;
        static MainMap_Longitude Longitude;
        static MainMap_DotInLongitude DotInLongitude;
        static MainMap_LongitudeContinueAfterDot LongitudeContinueAfterDot;
        static MainMap_CommaAfterLongitude CommaAfterLongitude;
        static MainMap_Height Height;
        static MainMap_Semicolon Semicolon;
        static MainMap_Equal Equal;
        static MainMap_Distance Distance;
        static MainMap_Error Error;
        static MainMap_Success Success;
    };

    class MainMap_Default :
        public AutomataAnalyzerState
    {
    public:

        MainMap_Default(const char * const name, const int stateId)
        : AutomataAnalyzerState(name, stateId)
        {};

        virtual void letter(AutomataAnalyzerContext& context, char symbol);
        virtual void number(AutomataAnalyzerContext& context, char symbol);
        virtual void equal(AutomataAnalyzerContext& context);
        virtual void colon(AutomataAnalyzerContext& context);
        virtual void eos(AutomataAnalyzerContext& context);
        virtual void semicolon(AutomataAnalyzerContext& context);
        virtual void comma(AutomataAnalyzerContext& context);
        virtual void dot(AutomataAnalyzerContext& context, char symbol);
        virtual void error(AutomataAnalyzerContext& context);
        virtual void begin(AutomataAnalyzerContext& context);
    };

    class MainMap_Geo :
        public MainMap_Default
    {
    public:
        MainMap_Geo(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void colon(AutomataAnalyzerContext& context);
        virtual void letter(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_Colon :
        public MainMap_Default
    {
    public:
        MainMap_Colon(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_Latitude :
        public MainMap_Default
    {
    public:
        MainMap_Latitude(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void comma(AutomataAnalyzerContext& context);
        virtual void dot(AutomataAnalyzerContext& context, char symbol);
        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_DotInLatitude :
        public MainMap_Default
    {
    public:
        MainMap_DotInLatitude(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_LatitudeContinueAfterDot :
        public MainMap_Default
    {
    public:
        MainMap_LatitudeContinueAfterDot(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void comma(AutomataAnalyzerContext& context);
        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_CommaAfterLatitude :
        public MainMap_Default
    {
    public:
        MainMap_CommaAfterLatitude(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_Longitude :
        public MainMap_Default
    {
    public:
        MainMap_Longitude(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void comma(AutomataAnalyzerContext& context);
        virtual void dot(AutomataAnalyzerContext& context, char symbol);
        virtual void eos(AutomataAnalyzerContext& context);
        virtual void number(AutomataAnalyzerContext& context, char symbol);
        virtual void semicolon(AutomataAnalyzerContext& context);
    };

    class MainMap_DotInLongitude :
        public MainMap_Default
    {
    public:
        MainMap_DotInLongitude(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_LongitudeContinueAfterDot :
        public MainMap_Default
    {
    public:
        MainMap_LongitudeContinueAfterDot(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void comma(AutomataAnalyzerContext& context);
        virtual void eos(AutomataAnalyzerContext& context);
        virtual void number(AutomataAnalyzerContext& context, char symbol);
        virtual void semicolon(AutomataAnalyzerContext& context);
    };

    class MainMap_CommaAfterLongitude :
        public MainMap_Default
    {
    public:
        MainMap_CommaAfterLongitude(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_Height :
        public MainMap_Default
    {
    public:
        MainMap_Height(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void eos(AutomataAnalyzerContext& context);
        virtual void number(AutomataAnalyzerContext& context, char symbol);
        virtual void semicolon(AutomataAnalyzerContext& context);
    };

    class MainMap_Semicolon :
        public MainMap_Default
    {
    public:
        MainMap_Semicolon(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void equal(AutomataAnalyzerContext& context);
        virtual void letter(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_Equal :
        public MainMap_Default
    {
    public:
        MainMap_Equal(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_Distance :
        public MainMap_Default
    {
    public:
        MainMap_Distance(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void eos(AutomataAnalyzerContext& context);
        virtual void number(AutomataAnalyzerContext& context, char symbol);
    };

    class MainMap_Error :
        public MainMap_Default
    {
    public:
        MainMap_Error(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void Entry(AutomataAnalyzerContext&);
        virtual void eos(AutomataAnalyzerContext& context);
    };

    class MainMap_Success :
        public MainMap_Default
    {
    public:
        MainMap_Success(const char * const name, const int stateId)
        : MainMap_Default(name, stateId)
        {};

        virtual void Entry(AutomataAnalyzerContext&);
    };

    class AutomataAnalyzerContext :
        public statemap::FSMContext
    {
    public:

        explicit AutomataAnalyzerContext(AutomataAnalyzer& owner)
        : FSMContext(MainMap::Height),
          _owner(owner)
        {};

        AutomataAnalyzerContext(AutomataAnalyzer& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        inline AutomataAnalyzer& getOwner()
        {
            return (_owner);
        };

        inline AutomataAnalyzerState& getState()
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return dynamic_cast<AutomataAnalyzerState&>(*_state);
        };

        inline void begin()
        {
            getState().begin(*this);
        };

        inline void colon()
        {
            getState().colon(*this);
        };

        inline void comma()
        {
            getState().comma(*this);
        };

        inline void dot(char symbol)
        {
            getState().dot(*this, symbol);
        };

        inline void eos()
        {
            getState().eos(*this);
        };

        inline void equal()
        {
            getState().equal(*this);
        };

        inline void error()
        {
            getState().error(*this);
        };

        inline void letter(char symbol)
        {
            getState().letter(*this, symbol);
        };

        inline void number(char symbol)
        {
            getState().number(*this, symbol);
        };

        inline void semicolon()
        {
            getState().semicolon(*this);
        };

    private:
        AutomataAnalyzer& _owner;
    };
}


#endif // AUTOMATAANALYZER_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
